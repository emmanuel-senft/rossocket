#!/usr/bin/env python
import rospy
import sys
from functools import partial
from multiprocessing import Process
import pickle
import socket
from sensor_msgs.msg import Image
import struct

class NamedMessage:
    def __init__(self, topic, message):
        self.topic = topic
        self.message = message

def split(array, l):
    for i in range(0, len(array), l):
        yield array[i:i+l]
    

rospy.init_node('ros_to_socket')
topics = rospy.get_param('~topics').split(',')
types = rospy.get_param('~types').split(',')
port = rospy.get_param('~port')
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('', port))
s.listen(10)

def subscriber_callback(topic, msg):
    named_msg = NamedMessage(topic, msg)
    message_bytes = pickle.dumps(msg)
    size = struct.calcsize(">L", message_bytes)
    s.sendall(size + message_bytes)
    return

pubs = {}
for topic, t in zip(topics, types):
    try:
        exec('from std_msgs.msg import ' + t)
    except:
        try:
            exec('from sensor_msgs.msg import ' + t)
        except:
            print('Import failed ' + t)
    exec('data_class = ' + t)
    pubs[topic] = rospy.Publisher(topic, data_class, queue_size=1)


conn, addr = s.accept()
data = b""
payload_size = struct.calcsize(">L")
while True:
    while len(data) < payload_size:
        data += conn.recv(4096)

    packed_msg_size = data[:payload_size]
    data = data[payload_size:]
    msg_size = struct.unpack(">L", packed_msg_size)[0]
    while len(data) < msg_size:
        data += conn.recv(4096)
    message_data = data[:msg_size]
    data = data[msg_size:]

    named_msg = pickle.loads(message_data)

    if named_msg.topic in pubs.keys():
        pubs[named_msg.topic].publish(named_msg.message)
    


